import os
import streamlit as st
import pickle
import time
import openai
from langchain.chains import RetrievalQAWithSourcesChain
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.document_loaders import UnstructuredURLLoader
from langchain.embeddings import OpenAIEmbeddings
from langchain.vectorstores import FAISS
from dotenv import load_dotenv
from langchain.llms.base import LLM

load_dotenv()  # take environment variables from .env (especially openai api key)

# Load OpenAI API key
openai.api_key = os.getenv("OPENAI_API_KEY")

class ChatOpenAI(LLM):
    def __init__(self, model_name: str = "gpt-3.5-turbo", temperature: float = 0.9, max_tokens: int = 500):
        self.model_name = model_name
        self.temperature = temperature
        self.max_tokens = max_tokens

    def _call(self, prompt: str):
        response = openai.ChatCompletion.create(
            model=self.model_name,
            messages=[{"role": "user", "content": prompt}],
            temperature=self.temperature,
            max_tokens=self.max_tokens
        )
        return response.choices[0].message['content']

    @property
    def _identifying_params(self):
        return {"model_name": self.model_name, "temperature": self.temperature, "max_tokens": self.max_tokens}
    
    @property
    def _llm_type(self):
        return "openai-chat"

st.title("TejaBot: News Research Tool ðŸ“ˆ")
st.sidebar.title("News Article URLs")

urls = []
for i in range(3):
    url = st.sidebar.text_input(f"URL {i+1}")
    urls.append(url)

process_url_clicked = st.sidebar.button("Process URLs")
file_path = "faiss_store_openai.pkl"

main_placeholder = st.empty()

if process_url_clicked:
    # load data
    loader = UnstructuredURLLoader(urls=urls)
    main_placeholder.text("Data Loading...Started...âœ…âœ…âœ…")
    data = loader.load()
    # split data
    text_splitter = RecursiveCharacterTextSplitter(
        separators=['\n\n', '\n', '.', ','],
        chunk_size=1000
    )
    main_placeholder.text("Text Splitter...Started...âœ…âœ…âœ…")
    docs = text_splitter.split_documents(data)
    # create embeddings and save it to FAISS index
    embeddings = OpenAIEmbeddings()
    vectorstore_openai = FAISS.from_documents(docs, embeddings)
    main_placeholder.text("Embedding Vector Started Building...âœ…âœ…âœ…")
    time.sleep(2)

    # Save the FAISS index to a pickle file
    with open(file_path, "wb") as f:
        pickle.dump(vectorstore_openai, f)

query = main_placeholder.text_input("Question: ")
if query:
    if os.path.exists(file_path):
        with open(file_path, "rb") as f:
            vectorstore = pickle.load(f)
            llm = ChatOpenAI(model_name="gpt-3.5-turbo", temperature=0.9, max_tokens=500)
            chain = RetrievalQAWithSourcesChain.from_llm(llm=llm, retriever=vectorstore.as_retriever())
            result = chain({"question": query}, return_only_outputs=True)
            # result will be a dictionary of this format --> {"answer": "", "sources": [] }
            st.header("Answer")
            st.write(result["answer"])

            # Display sources, if available
            sources = result.get("sources", "")
            if sources:
                st.subheader("Sources:")
                sources_list = sources.split("\\n")  # Split the sources by newline
                for source in sources_list:
                    st.write(source)
'''

# Save the updated main.py file with ChatOpenAI class and _llm_type property
updated_main_chat_class_llm_file_path = "/main_chat_class_llm_updated.py"

with open(updated_main_chat_class_llm_file_path, "w") as file:
    file.write(updated_main_contents_chat_class_llm)

updated_main_chat_class_llm_file_path
